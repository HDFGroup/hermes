#+TITLE: Hermes Design
#+AUTHOR: The Hermes Project
#+DATE: [2019-08-28 Wed]
#+OPTIONS: num:4 toc:t

For a Hermes overview see cite:KougkasEtAl2018.

* Models

  See cite:Maier2009.

** Purpose/objective
   /(What the client wants)/

   - Distributed deep memory and storage hierarchies
     - In HPC and cloud architectures
     - Require expert knowledge (currently)
     - Independent layers
     - Vertical /and/ horizontal I/O
   - Accelerate I/O through
     - Delay write
     - Pre-read/cache
     - Smart placement and transfer
   - Baseline: PFS, ...
   - Optimization problem
     - Policies
   - Enhance and extend /current/ software
     - Transparent, no code changes, adapters (POSIX, MPI-IO), =LD_PRELOAD=
     - Hermes API for new development
   - Audience
     - NSF -> science and research community

*** Use cases

**** HPC

**** Cloud

*** Differences between Hermes (buffer pool) and the UNIX buffer cache
    - Hermes buffers have no direct storage counterparts such as disk blocks.
    - Hermes buffers are typically used in buffer allocations (sequences of
      buffers) and state is associated with such allocations rather than
      individual buffers.
    - Hermes maintains buffer integrity but has no integrity concept for
      entities in storage clients. Features such as `file system integrity'
      need to be implemented by the corresponding adapters.
*** TODO Why?
    Ask why the project is being done in the first place. Think about what
    completing the project would be like. What would the finished project look
    like?


** Behavioral or functional
   /(What the system does)/

*** Core functions

    These are /user-level/ functions. The only user-visible primitives are
    buckets, vBuckets, and traits. They are finite resources, i.e., a creation
    function might return an error, if system limits are exceeded.

    Buckets are collections of /named/ (and timestamped = immutable) blobs that
    are internally represented by a sequence of buffers in the storage
    hierarchy.

    #+CAPTION: Hermes Primitives label:fig:HERMES-primitves
    #+ATTR_HTML: :width 50%
    [[./img/primitives.png]]

    vBuckets are used to group buckets by capabilities or features expressed in
    traits. Traits are represented as sets of key/value pairs.

    #+CAPTION: Hermes Core User Functions label:fig:HERMES-user-core
    #+ATTR_HTML: :width 50%
    [[./img/user-core.png]]

    Nomenclature used in examples:

    #+BEGIN_EXAMPLE
    ctx    - context
    vbkt   - vBucket handle
    bkt    - bucket handle
    name   - byte vector / unicode string
    data   - user data
    trs    - traits
    key    - a trait property name (unicode string)
    val    - a trait property value (byte vector)
    status - error code
    #+END_EXAMPLE

    1. =vbkt <- acquire(name, trs, ctx)=
       - purpose: :: acquire a vBucket with a set of traits
       - input: :: name, set of vBucket traits, context
       - output: :: vBucket handle
       A trait could be represented as a set of key/value pairs.
    2. =status <- release(vbkt, ctx)=
       - purpose: :: release a vBucket
       - input: :: vBucket handle, context
       - output: :: error code
       The context controls the side-effects on buckets (if any).
    3. =status <- edit(vbkt, key, val, ctx)=
       - purpose: :: update a vBucket's trait property
       - input: :: vBucket handle, trait property name, trait property value,
                   context
       - output: :: error code
       Here we assume either that the trait property name is unambiguous or
       that it's clear from the context which trait is referenced.
    4. =bkt <- acquire(vbkt, name, ctx)=
       - purpose: :: acquire a bucket and link it to the vBucket referenced
       - input: :: vBucket handle, name, context
       - output: :: bucket handle
    5. =status <- release(bkt, ctx)=
       - purpose: :: release a bucket and flush/release the underlying buffers
       - input: :: bucket handle, context
       - output: :: error code
       The context controls the side-effects on buffers (if any).
    6. =status <- put(bkt, name, data, ctx)=
       - purpose: :: write user data to a bucket (buffer)
       - input: :: bucket handle, name, user data, context
       - output: :: error code
    7. =data <- get(bkt, name, ctx)=
       - purpose: :: read user data from a bucket (buffer)
       - input: :: bucket handle, name, context
       - output: :: user data
       A =get= may trigger a "cache miss" in which case I/O clients, etc., will
       get involved.
    8. =status <- link(vbkt, bkt, ctx)=
       - purpose: :: associate a bucket with a vBucket
       - input: :: vBucket handle, bucket handle, context
       - output: :: error code
    9. =status <- unlink(vbkt, bkt, ctx)=
       - *purpose:* :: dissociate a bucket from a vBucket
       - *input:* :: vBucket handle, bucket handle, context
       - *output:* :: error code

*** Basic examples

    For files in a POSIX file system, the following parallels might be drawn:
    - trait "=" directory-level metadata, file invariants
    - vBucket "=" directory or file system
    - bucket "=" (kernel) file table entry

    Let's look at the simplest POSIX use cases!

**** UNIX =write=

     #+begin_src C -n
     // FILE* fp = fopen("test.dat", "a+");
     hvbkt = hermes::acquire($HOME, trs, ctx);
     hbkt = hermes::acquire(hvbkt, "test.dat", ctx);
     int* data = ... ;
     // fwrite(data, sizeof(int), count, fp);
     hermes::put(hbkt, key(0, count), data, ctx);
     // long offset = ... ;
     // fseek(fp, offset, SEEK_SET);
     // fwrite(data, sizeof(int), count, fp);
     hermes::put(hbkt, key(offset, count), data, ctx);
     // fclose(fp);
     hermes::release(hbkt, ctx);
     hermes::release(hvbkt, ctx);
     #+end_src

     - line 1 :: What are the traits in =trs=?
     - line 2 :: This could be a side effect of 3 by acquiring a bucket on the
                 "default vBucket."
     - line 3 :: =ctx= contains the access mode, etc.
     - line 6 :: The =key= function calculates the "name" of the stream to be
                 written.
     - line 13 :: This might be unnecessary when the default vBucket is used or
                  the vBucket represents a file system.

**** UNIX =read=

     #+begin_src C -n
     // FILE* fp = fopen("test.dat", "r");
     hvbkt = hermes::acquire($HOME, trs, ctx);
     hbkt = hermes::acquire(hvbkt, "test.dat", ctx);
     // int* data = ... ;
     // fread(data, sizeof(int), count, fp);
     data = hermes::get(hbkt, key(0, count), ctx);
     // long offset = ... ;
     // fseek(fp, offset, SEEK_SET);
     // fread(data, sizeof(int), count, fp);
     data = hermes::get(hbkt, key(offset, count), ctx);
     // fclose(fp);
     hermes::release(hbkt, ctx);
     hermes::release(hvbkt, ctx);
     #+end_src

     - line 1 :: What are the traits in =trs=?
     - line 2 :: This could be a side effect of 3 by acquiring a bucket on the
                 "default vBucket."
     - line 3 :: =ctx= contains the access mode, etc.
     - line 6 :: The =key= function calculates the "name" of the stream to be
                 written.
     - line 13 :: This might be unnecessary when the default vBucket is used or
                  the vBucket represents a file system.


** Form
   /(What the system is)/

   - I/O middleware library
     - =LD_PRELOAD=-able
   - API adapters
     - UNIX
     - MPI-IO
     - HDF5
       - HDF5 Virtual File Driver (VFD)
       - HDF5 Virtual Object Layer (VOL) plugin
   - Services
     - Application coordinator
   - Tools
     - System profiler
     - Schema parser

*** Core components

    #+CAPTION: Hermes Components
    #+ATTR_HTML: :width 50%
    #+NAME:   fig:HERMES
    [[./img/hermes-stack.png]]

    - API Adapters :: Intercept standard API calls and "translate" into Hermes
                      calls.
    - Hermes API :: Getting Hermes things done
    - Data placement engine (DPE) :: Oracle
    - Prefetcher (PRE) :: Trigger read ahead
    - Metadata manager (MDM) :: Hold user- and Hermes-internal metadata
    - Messaging service (MSG) :: =BCAST "Hello, World!"=
    - Data organizer (ORG) :: Execute data placement decisions. Respond to
         events. (e.g., no space left on device)
    - Buffer pool manager (BPM) :: Buffer management
    - I/O clients (IOC) :: Storage interfaces that do the actual I/O.

**** Buffer pool manager

     - Manages a (finite) buffer pool $BP = \{b_i\}_{i\in I}$
     - The $b_i$ are pre-allocated (across the hierarchy) fixed-size buffers
     - A /buffer pool allocation/ is a sequence of buffers
       $(b_{i_1},\ldots,b_{i_n}),  b_{i_k}\in BP, 1\leq k\leq n$
     - Certain operations are supported on buffer pool allocations
       - /Buffer fission/ - the splitting of one or more buffers in an allocation
         into smaller buffers
       - /Buffer fusion/ - the joining of two or more adjacent buffers into a
         larger buffer
       - What else?
     - What are the possible /states/ of a buffer allocation?
     - Chemistry analogy, molecules, polymer chains, etc.
     - What's the initial size/layer distribution? Ratio...

*** Allocation of core functions to components

    The messaging service is present in all of these.
    However, it doesn't really do anything specific to the
    behavior of these functions.

    #+CAPTION: Core function allocation
    #+TBLNAME: table-1
    |                   | *DPE* | *MDM* | *ORG* | *PRE* | *BUM* | *IOC* |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =create= (vBucket)  |     | [x] |     |     |     |     |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =destroy= (vBucket) |     | [x] | [*] |     | [*] | [*] |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =create= (bucket)   |     | [x] |     |     |     |     |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =destroy= (bucket)  |     | [x] | [*] |     | [*] | [*] |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =put=               | [x] |     | [*] |     | [x] | [x] |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =get=               | [x] |     | [*] | [x] | [*] | [x] |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =edit=              |     | [x] | [*] | [*] |     |     |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =link=              |     | [x] |     |     |     |     |
    |-------------------+-----+-----+-----+-----+-----+-----|
    | =unlink=            |     | [x] |     |     |     |     |
    #+TBLFM: $1=create= vBucket

    #+BEGIN_EXAMPLE
    [x] - All function use cases involve this component
    [*] - Some function use cases involve this component
    #+END_EXAMPLE

**** TODO Review the allocation table.
**** TODO Break down the MDM.
**** TODO What is the synchronization cycle?
     We must prove that the buffering is self-regulating and the application
     never sees inconsistent data. How much fault tolerance do we need / can we
     afford?

*** Distribution

    #+CAPTION: Hermes Node
    #+ATTR_HTML: :width 50%
    #+NAME:   fig:HERMES-node
    [[./img/hermes-node.png]]

*** Adapters

    #+CAPTION: Hermes Adapter
    #+ATTR_HTML: :width 25%
    #+NAME:   fig:HERMES-adapter
    [[./img/adapter.png]]

    1. The Unix Universal I/O Adapter
       - =open=
       - =creat=
       - =close=
       - =read=
       - =write=
       - =lseek=
       - =writev=
       - =readv=
       - =pread=
       - =pwrite=

    2. The MPI-IO Adapter

**** TODO Look at the HDF5 source and compile a list of MPI-IO calls what we need

     #+CAPTION: Adaptor modules label:fig:adaptors
     #+ATTR_HTML: :width 50%
     [[./img/modules.png]]
*** Modules

**** Hermes core API

     - Configuration
     - Layers (tiers), buffer pools, buffers
     - vBuckets (mappings)
     - Instrumentation
     - Messaging
     - Data placement engine
     - Data organizer
       - Transfer content between buffers in /different/ buffer pools
       - Sync variants
         - Gather blocks to buffers
         - Scatter buffers to blocks
         - Asynchronous and ahead/delayed variants

*** Configuration

    - XML

** Performance objectives or requirements
   /(How effectively the system does it)/

   - Metrics
     * (Difference to caching metrics)
     * Layer occupancy
     * Network traffic
     * Latency
     * Throughput
     * Overflow handling
     * Scalability
     * Capacity
     * Concurrency
     * Resource contention
   - Baseline (host FS or PFS)
   - Fault tolerance
   - Data consistency
   - Thread safety

*** Policies

    1. Maximum application bandwidth
    2. Maximum data locality
    3. Hot-data
    4. User-defined
** Data
   /(The information retained in the system and its interrelationships)/

   - Layer configuration
   - Buffers, buckets, vBuckets
   - Profile and instrumentation data
   - Policies
   - Node status
   - File properties

*** Metadata Management

    - vBucket list
      #+BEGIN_EXAMPLE
      | vBucket ID | Name | List of Bucket Links | Trait(s) | RC |
      |------------+------+----------------------+----------+----+
      #+END_EXAMPLE
    - vBucket free list
    - vBucket name to vBucket ID map (bi-directional?) Maybe just one-way:
      =name -> ID=

    /Can a vBucket have more than one trait?/ (No, for now.)

    /Can traits be shared?/ (The vBucket is the trait.)

    - Bucket list
      #+BEGIN_EXAMPLE
      | Bucket ID | Name | Map of Buffer IDs | vBucket IDs | RC |
      |-----------+------+-------------------+-------------+----+
      #+END_EXAMPLE
    - Bucket free list
    - Bucket name to bucket ID map (bi-directional)

    - Buffer list
      #+BEGIN_EXAMPLE
      | Buffer ID | Tier | Size | Status | Place |
      |-----------+------+------+--------+-------|
      #+END_EXAMPLE
    - Buffer free list (by tier)

** Managerial
   /(The process by which the system is constructed and managed)/

*** Milestones

**** TODO Create a Hermes library skeleton
     - CMake, C++11
     - Draft of the Hermes low-level API
     DEADLINE: <2019-04-30 Tue>
**** TODO Create a Hermes POSIX adapter skeleton
     - CMake, C++11, C99
     - Draft of the Hermes high-level API
     DEADLINE: <2019-05-31 Fri>

*** Testing


* Detailed Design

** POSIX Adapter

   The POSIX adapter assumes a /paged/ view of a logical file, a byte vector.

   *What's the relationship between the page size and the pre-defined buffer
   sizes in buffer pools?*

   #+CAPTION: Hermes File to Object Mapping:fig:HERMES-file-2-object
   #+ATTR_HTML: :width 50%
   [[./img/file2object.png]]

   #+CAPTION: Hermes Balanced File Mapping:fig:HERMES-balanced-map
   #+ATTR_HTML: :width 50%
   [[./img/balanced-mapping.png]]


   This adapter supports a subset of [[https://pubs.opengroup.org/onlinepubs/9699919799/][POSIX.1]] calls (see below) related to file
   I/O. It also supports /poor-man's parallel I/O/ to multiple independent files
   (MIF).

***  Metadata structures

    We call them tables, but they are /maps/...

**** File table (FT)

     The =File ID= is obtained from =fstat=. The first two fields of the returned
     =struct stat= uniquely identify a file.

     #+begin_example
     File ID := (st_dev, st_ino)
     #+end_example

     #+begin_example
     File ID -> (Bucket ID, Page Size, Reference Count)
     #+end_example

     - Do we need to track EOA/EOF?

**** File descriptor table (FDT)

     #+begin_example
     File Desc. -> (File ID, Cursor, Append Mode)
     #+end_example

**** Working set (WS)

     The set of page keys currently present in file buckets.

     #+begin_example
     File Page Key := (File ID, Page Key)
     #+end_example

**** Working set statistics (WSS)

     #+begin_example
     File Page Key -> (read count, write count)
     #+end_example

     *WARNING:* Generally, the key sets of WS and WSS will be different. The
     former is a subset of the latter.

*** Supported APIs

**** =open=

     #+begin_src c
     int open(const char *pathname, int flags);
     int open(const char *pathname, int flags, mode_t mode);
     #+end_src

     #+begin_example
     - Open/create the file, obtain new file descriptor
     - Compute File ID
     - IF File ID in FT:
       - Increment Reference Count
     - ELSE:
       - Call flock and place an exclusive lock on the file
       - Acquire a Hermes bucket
       - Create a new entry in FT
       - Release the lock
     - Add entry to FDT
     - RETURN file descriptor
     #+end_example

**** =write=

     #+begin_src c
     ssize_t write(int fd, const void *buf, size_t count);
     #+end_src

     #+begin_example
     - Compute File Page Key Range
     - IF File Desc. IN Append Mode:
       - Move Cursor to end of file
     - FORALL File Page Key IN File Page Key Range:
       - IF writing full page:
         - Call hermes::put on file bucket w/ File Page Key and user buffer
       - ELSE:
         - IF File Page Key in WS:
           - Call hermes::get to retrieve buffer associated with File Page Key
         - ELSE:
           - Call client_read to retrieve the data
         - Merge w/ user buffer
         - Call hermes::put
       - UNLESS File Page Key in WSS:
         - Add (File Page Key, (0,0)) to WSS
       - Increment write count for File Page Key
     - Advance Cursor for this File Desc.
     - RETURN the number of bytes written
     #+end_example

**** =read=

     #+begin_src c
     ssize_t read(int fd, void *buf, size_t count);
     #+end_src

     #+begin_example
     - Compute File Page Key Range
     - FORALL File Page Key in Page Key Range:
       - IF File Page Key in WS:
         - hermes::get the data
       - ELSE:
         - Call client_read to retrieve the data
         - hermes::put the data (optional?)
       - IF reading full page:
         - Copy data to user buffer
       - ELSE:
         - Merge data into user buffer
       - UNLESS File Page Key in WSS:
         - Add (File Page Key, (0,0)) to WSS
       - Increment read count for File Page Key
     - Advance Cursor for this File Desc.
     - RETURN the number of bytes read
     #+end_example

**** =lseek=

     #+begin_src c
     off_t lseek(int fd, off_t offset, int whence);
     #+end_src

     #+begin_example
     - Call lseek
     - Update the Cursor for File Desc. fd
     - RETURN the new offset
     #+end_example

**** =posix_fallocate=

     #+begin_src c
     int posix_fallocate(int fd, off_t offset, off_t len);
     #+end_src

**** =close=

     #+begin_src c
     int close(int fd);
     #+end_src

     #+begin_example
     - Call client_close
     - Remove the corresponding entry from FDT
     - Decrement the Reference Count
     - IF Reference Count == 0:
       - Call client_flock and place an exclusive lock on the file
       - Release the Hermes bucket
       - Remove the entry from FT
       - Release the lock
     #+end_example

*** System calls in =H5FDsec2.c=

    - =open=
    - =close=
    - =read=, =pread=
    - =write=, =pwrite=
    - =lseek=
    - =stat=
    - =ftruncate=
    - =flock=
    - =fallocate= (?)


* Glossary

  We follow closely standard terminology for Unix-like systems with minor
  adaptations. (cite:Bach1986, cite:Kerrisk2010.)

  - Block :: A configurable but fixed unit or granule of I/O. All I/O
             operations occur in multiples of blocks and all offsets are
             block-aligned. Let /B/ denote the configurable but fixed
             /block size/ in bytes. (A typical value for /B/ is 4096 bytes.)
  - Buffer :: A storage object which consists of metadata and data.
              1. A header that identifies the buffer, its size, status, etc.
              2. A byte stream, the buffer content.
  - Buffer Pool :: During Hermes initialization, a set of buffers according to
                   a predefined size distribution is created across storage
                   layers. (See figure ref:fig:HERMES-buffer-pool.)
                   As I/O activity commences, the buffer pool divides
                   into "regions" such as the following:
                   - Unused or available buffers
                   - Buffers used a RAM cache
                   - Buffers mapped to (regions of) files in NVMe devices
                   - Buffers mapped to (regions of) files in burst buffers
                   - Etc.
                   - A PFS "swap file"
  - Bucket :: A data structure that represents a collection of /named/ streams
              (buffers).
  - Trait :: A set of properties represented as
             (unicode string) key/(byte array) value pairs.
  - Virtual Bucket (vBucket) :: A data structure that represents a set of
       traits common among a set of /named/ buckets.
  - Visibility :: A vBucket can be /shared/ or /private/. The visibility
                  depends on control flow granularity, i.e., threads, MPI
                  processes, etc.

  #+CAPTION: Hermes Buffer Pool label:fig:HERMES-buffer-pool
  #+ATTR_HTML: :width 50%
  [[./img/hermes-bucket-pool.png]]

** Tasks

*** TODO Clarify how we identify buffers, buckets, and vBuckets
    - Should we be able to infer the MPI rank, bucket size, and score from a
      bucket's ID?
*** TODO Clarify the buffer pool initialization
    - What's our thinking on a bucket size distribution?
*** TODO Clarify the vBucket management


* Miscellaneous


** Magic numbers

   | Size (Bytes) | Comment                                     |
   |--------------+---------------------------------------------|
   |          256 | ext4 inode size                             |
   |          512 | Default sector size of a Linux block device |
   |         4096 | Default memory page size                    |
   |         4096 | Default ext4 inode block size               |


** Paged allocation and buffering in HDF5

   For the technical details of HDF5 file space management, paged allocation,
   aggregation, and buffering see cite:Chaarawi2015, cite:ChoiEtAl2017.
   These features are designed to be used together and don't make much sense
   on their own.

   - If an I/O request is equal or larger than a file's page size, the
     page buffer calls directly into the VFD layer.
   - SWMR writers are not supported because of the flush dependence.
     SWMR readers are fine as long as on refresh they evict all pages
     which have evicted metadata cache entries on them.

*** Parallel issues

    - Metadata :: Writes are collective and this works if rank 0 does all
                  writing (=H5AC_METADATA_WRITE_STRATEGY__PROCESS_0_ONLY=).
                  Distributed write strategies are currently not supported.
                  _Main reason_: a new distributed algorithm for distributing
                  entries according to pages would be necessary. The overhead
                  could be substantial and void potential savings or make
                  matters worse. Likewise, PB can be effective if metadata
                  reads are collective and process 0 does all the reading
                  and broadcasting.
    - Raw data :: Currently unsupported. _Rationale_: Unlike metadata access,
                  raw data access is not "atomic" and can be done collectively
                  or independently. Independent access might benefit, but,
                  since it can be used simultaneously w/ collective I/O, this
                  might lead to data inconsistency.

*** API

    Paged buffering is supported in the HDF5 library since version 1.10.1. The
    page buffer sits right above the VFD layer and acts as a cache for small
    (meta-)data I/O. With this feature enabled, I/O is always done in multiples
    of pages.

    1. Set the file space allocation strategy in the file creation property
       list to =H5F_FSPACE_STRATEGY_PAGE=:
       #+begin_src C
       herr_t H5Pset_file_space_strategy
       (
        hid_t fcpl,
        H5F_fspace_strategy_t strategy,
        hbool_t persist,
        hsize_t threshold
        );
       #+end_src
       - =persist= controls whether free space should be persisted.
       - =threshold= is the smallest free-space section size that the free space
         manager will track.
    2. Specify the page size of file space allocation:
       #+begin_src C
       herr_t H5Pset_file_space_page_size (hid_t fcpl, hsize_t fsp_size);
       #+end_src
       The default page size is 4096 bytes.
    3. To enable page buffering set the maximum page buffer size on the file
       access property list:
       #+begin_src C
       herr_t H5Pset_page_buffer_size
       (
        hid_t fapl,
        size_t buf_size,
        unsigned min_meta_perc,
        unsigned min_raw_perc
        );
       #+end_src
       - =buf_size= should be a multiple of the paged allocation size.
       - =min_meta_perc= - the minimum metadata percentage to keep in the page
         buffer before allowing pages containing metadata to be evicted.
       - =min_raw_perc= - Minimum raw data percentage to keep in the page buffer
         before allowing pages containing raw data to be evicted.

**** TODO Compile a list of HDF5 features that we might want to disable


** Templates

*** Diagrams

**** Sequence

     #+CAPTION: A sequence diagram label:fig:sequence-diagram
     #+ATTR_HTML: :width 50%
     [[./img/sequence.png]]

**** State

     #+CAPTION: A state machine diagram label:fig:state-machine-diagram
     #+ATTR_HTML: :width 50%
     [[./img/state-machine.png]]

**** Quality

     #+CAPTION: The quality triangle label:fig:quality-triangle
     #+ATTR_HTML: :width 40%
     [[./img/quality.png]]

*** Code outline template

    #+BEGIN_EXAMPLE
    terminate:= false
    initialize application/application protocols
    ask for current state (image request)
    Loop
    Get_event
    Case Event_Type is
    -- "normal" (non-fault-tolerant-related) requests to
    -- perform actions; only happens if this unit is the
    -- current primary address space
    when X => Process X
    Send state data updates to other address spaces
    when Y => Process Y
    Send state data updates to other address spaces
    ...
    when Terminate_Directive => clean up resources; terminate:= true
    when State_Data_Update => apply to state data
    -- will only happen if this unit is a secondary address
    -- space, receiving the update from the primary after it
    -- has completed a "normal" action sending, receiving
    -- state data
    when Image_Request => send current state data to new address space
    when State_Data_Image => Initialize state data
    when Switch_Directive => notify service packages of change in rank
    -- these are requests that come in after a PAS/SAS
    -- switchover; they report services that they had
    -- requested from the old (failed) PAS which this unit
    -- (noe the PAS) must complete. A, B, etc. are the names
    -- of the clients.
    when Recon_from_A => reconstitute A
    when Recom_from_B => reconstitute B
    ...
    when others => log error
    end case
    exit when terminate
    end loop
    #+END_EXAMPLE


    bibliographystyle:unsrtnat
    bibliography:references.bib
