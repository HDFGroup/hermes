template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Alloc(const TaskNode &task_node,
                                                  Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task = HRUN_CLIENT->AllocateTask<CUSTOM##Task>();
  Async##CUSTOM##Construct(task.ptr_, task_node, std::forward<Args>(args)...);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM(const TaskNode &task_node, 
                                           Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(task_node, std::forward<Args>(args)...);
  MultiQueue *queue = HRUN_CLIENT->GetQueue(queue_id_);
  queue->Emplace(task.ptr_->prio_, task.ptr_->lane_hash_, task.shm_);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Emplace(MultiQueue *queue,
                                                    const TaskNode &task_node,
                                                    Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(task_node, std::forward<Args>(args)...);
  queue->Emplace(task.ptr_->prio_, task.ptr_->lane_hash_, task.shm_);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Root(Args&& ...args) {
  TaskNode task_node = HRUN_CLIENT->MakeTaskNodeId();
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM(task_node + 1, std::forward<Args>(args)...);
  return task;
}