/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Distributed under BSD 3-Clause license.                                   *
 * Copyright by The HDF Group.                                               *
 * Copyright by the Illinois Institute of Technology.                        *
 * All rights reserved.                                                      *
 *                                                                           *
 * This file is part of Hermes. The full Hermes copyright notice, including  *
 * terms governing use, modification, and redistribution, is contained in    *
 * the COPYING file, which can be found at the top directory. If you do not  *
 * have access to the file, you may request a copy from help@hdfgroup.org.   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef HERMES_ADAPTER_STDIO_NATIVE_H_
#define HERMES_ADAPTER_STDIO_NATIVE_H_

#include <memory>

#include "adapter/filesystem/filesystem.h"
#include "adapter/filesystem/filesystem_mdm.h"
#include "adapter/posix/posix_fs_api.h"
#include "stdio_api.h"
#include "stdio_io_client.h"

namespace hermes::adapter::fs {

/** A class to represent POSIX IO file system */
class StdioFs : public hermes::adapter::fs::Filesystem {
 public:
  StdioFs() : hermes::adapter::fs::Filesystem(HERMES_STDIO_IO_CLIENT,
                                              AdapterType::kStdio) {}

  /** Close an existing stream and then open with new path */
  FILE* Reopen(const std::string &user_path, const char *mode,
               AdapterStat &stat) {
    auto real_api = HERMES_STDIO_API;
    FILE *ret;
    ret = real_api->freopen(user_path.c_str(), mode, stat.fh_);
    if (!ret) {
      return ret;
    }
    stat.fh_ = ret;
    HILOG(kDebug, "Reopen file for filename: {} in mode {}",
          user_path, mode)
    stat.UpdateTime();
    return (FILE*)&stat;
  }

  /** fdopen */
  FILE* FdOpen(const std::string &mode,
               std::shared_ptr<AdapterStat> &stat) {
    auto real_api = HERMES_STDIO_API;
    auto mdm = HERMES_FS_METADATA_MANAGER;
    stat->fh_ = real_api->fdopen(stat->fd_, mode.c_str());
    stat->mode_str_ = mode;
    File f; f.hermes_fh_ = (FILE*)stat.get();
    mdm->Create(f, stat);
    return f.hermes_fh_;
  }

  /** Whether or not \a fd FILE DESCRIPTOR is tracked */
  static bool IsFdTracked(int fd, std::shared_ptr<AdapterStat> &stat) {
    return PosixFs::IsFdTracked(fd, stat);
  }

  /** Whether or not \a fd FILE DESCRIPTOR is tracked */
  static bool IsFdTracked(int fd) {
    return PosixFs::IsFdTracked(fd);
  }

  /** Whether or not \a fp FILE was generated by Hermes */
  static bool IsFpTracked(FILE* fp, std::shared_ptr<AdapterStat> &stat) {
    if (!fp || !HERMES->IsInitialized()) {
      return false;
    }
    hermes::adapter::fs::File f;
    f.hermes_fh_ = fp;
    stat = HERMES_FS_METADATA_MANAGER->Find(f);
    return stat != nullptr;
  }

  /** Whether or not \a fp FILE was generated by Hermes */
  static bool IsFpTracked(FILE* fp) {
    std::shared_ptr<AdapterStat> stat;
    return IsFpTracked(fp, stat);
  }

  /** get the file name from \a fp file pointer */
  static std::string GetFilenameFromFP(FILE* fp) {
    char proclnk[kMaxPathLen];
    char filename[kMaxPathLen];
    int fno = fileno(fp);
    snprintf(proclnk, kMaxPathLen, "/proc/self/fd/%d", fno);
    size_t r = readlink(proclnk, filename, kMaxPathLen);
    filename[r] = '\0';
    return filename;
  }
};

/** Simplify access to the stateless StdioFs Singleton */
#define HERMES_STDIO_FS \
  hshm::EasySingleton<hermes::adapter::fs::StdioFs>::GetInstance()
#define HERMES_STDIO_FS_T hermes::adapter::fs::StdioFs*

}  // namespace hermes::adapter::fs

#endif  // HERMES_ADAPTER_STDIO_NATIVE_H_
