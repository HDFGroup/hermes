# Example Hermes configuration file

# TODO(chogan): Allow specifying capacity values in bytes, KiB, or GiB.

# The number of buffering tiers available. For example, RAM, NVMe, burst
# buffer, and parallel file system would be 4 tiers.
num_devices = 4;
# For now this should be the same as num_devices.
num_targets = 4;

# The maximum buffering capacity in MiB of each device. Here we say that all 4
# devices get 50 MiB of buffering capacity.
capacities_mb = {50, 50, 50, 50};
# The size of the smallest available buffer in KiB. In general this should be
# the page size of your system for byte addressable storage, and the block size
# of the storage device for block addressable storage.
block_sizes_kb = {4, 4, 4, 4};
# The nummber of size categories for each device. Here we say that each of our 4
# devices should have 4 different sizes of buffers.
num_slabs = {4, 4, 4, 4};

# The number of blocks (the size of which is chosen in block_sizes_kb) that each
# device should contain for each slab (controlled by num_slabs). This allows for
# precise control of the distibution of buffer sizes.
slab_unit_sizes = {
  {1, 4, 16, 32},
  {1, 4, 16, 32},
  {1, 4, 16, 32},
  {1, 4, 16, 32},
};

# The percentage of buffering capacity per device to allocate for each slab.
# Each row should add up to 1. In this example, we have 4 devices, each with 4
# slabs, and each slab is allotted 25% of the device's total buffering capacity.
desired_slab_percentages = {
  {0.25, 0.25, 0.25, 0.25},
  {0.25, 0.25, 0.25, 0.25},
  {0.25, 0.25, 0.25, 0.25},
  {0.25, 0.25, 0.25, 0.25},
};

# The maximum theoretical bandwidth (as advertised by the manufacturer) in
# MiB/sec. of each device.
bandwidths_mbps = {6000, 300, 150, 70};
# The latency in microseconds of each device (as advertised by the manufactuerer).
latencies_us = {15, 250000, 500000, 1000000};

# Hermes memory management. The following 4 values should add up to 1.
# The percentage of Hermes memory to reserve for RAM buffers.
buffer_pool_arena_percentage = 0.8;
# The percentage of Hermes memory to reserve for metadata.
metadata_arena_percentage = 0.1;
# The percentage of Hermes memory to reserve for data transfers.
transfer_window_arena_percentage = 0.08;
# The percentage of Hermes memory to reserve for short term storage.
transient_arena_percentage = 0.02;

# The maxiumum number of buckets that can be created.
max_buckets_per_node = 16;
# The maxiumum number of virtual buckets that can be created.
max_vbuckets_per_node = 8;
# The interval in milliseconds at which to update the global system view.
system_view_state_update_interval_ms = 1000;

# The mount point of each device. RAM should be the empty string. For block
# devices, this is the directory where Hermes will create buffering files. For
# object storage or cloud targets, this will be a url.
mount_points = {"", "./", "./", "./"};
# The mount point of a PFS or object store for swap space, in the event that
# Hermes buffers become full.
swap_mount = "./";
# The number of times the buffer organizer will attempt to place a blob from
# swap space into the hierarchy before giving up.
num_buffer_organizer_retries = 3;
# Base hostname for the RPC servers.
rpc_server_base_name = "localhost";
# RPC server name suffix. This is appended to the the base name plus host
# number.
rpc_server_suffix = "";
# The RPC protocol. This must come from the documentation of the specific RPC
# library in use.
rpc_protocol = "ofi+sockets";
# RPC domain name for verbs transport. Blank for tcp.
rpc_domain = "";
# Desired RPC port number.
rpc_port = 8080;
# Desired RPC port number for buffer organizer.
buffer_organizer_port = 8081;
# An inclusive range of the first and last server numbers. This is a convenience
# feature for generating long lists of server names. For example, if your
# servers are called server-1-40g, server-2-40g, server-3-40g, all the way to
# server-100-40g, then you would set rpc_server_base_name to 'server',
# rpc_server_suffix to '-40g', and rpc_host_number_range to {1, 100}.
# TODO(chogan): Support reading server names from file.
rpc_host_number_range = {0, 0};
# The number of handler threads for each RPC server.
rpc_num_threads = 1;
# The shared memory prefix for the hermes shared memory segment. A user name
# will be automatically appended.
buffer_pool_shmem_name = "/hermes_buffer_pool_";
